
#include <msp430xG46x.h> // Library
#include <LCD_defs.h>    // Library


unsigned char blink_status=1;
volatile unsigned int i;
volatile unsigned int j;

//******************************************************************
// Interrupt buttons P1.0 ---> P1.7
//******************************************************************

void B1_button()
{
    
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x01));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.0 Interrupt Flag
   
}
////////////////////////////////////////////////////////////////////////////////

void B2_button()
{
     
   volatile unsigned int i;
   P2OUT ^= 0x02;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x02));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.1 Interrupt Flag
   
}










////////////////////////////////////////////////////////////////////////////////

void B3_button()
{
  
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x04));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.2 Interrupt Flag
}

////////////////////////////////////////////////////////////////////////////////

void B4_button()
{
  
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x08));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.3 Interrupt Flag
   
}

////////////////////////////////////////////////////////////////////////////////

void B5_button()
{
  
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x10));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.4 Interrupt Flag
   
}









////////////////////////////////////////////////////////////////////////////////

void B6_button()
{
    
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x20));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.5 Interrupt Flag
   
}

////////////////////////////////////////////////////////////////////////////////

void B7_button()
{
   
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x40));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.6 Interrupt Flag
   
}

////////////////////////////////////////////////////////////////////////////////

void B8_button()
{
    
   volatile unsigned int i;
   P2OUT ^= 0x04;                 //Toggle Port P2.2
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);
   
   while (! (P1IN & 0x80));        //Wait for the release of the button
   
   i=1500;                        //Delay, button debounce 
   do (i--);
   while (i !=0);

   P1IFG &= 0x00;                //Clean P1.7 Interrupt Flag
   
}



//******************************************************************
// Write Hour in LCD
//******************************************************************
void LCD_hour()
{
	switch (RTCHOUR & 0xF0)		// switch to write hour first digit
	{
		case 0x10: P7_A1;
		           break;
		case 0x20: P7_A2;
		           break;
		case 0x00: P7_A0;
		           break;
	}
        switch (RTCHOUR & 0x0F)		// switch to write hour second digit
	{
		case 0x01: P6_A1;
		           break;
		case 0x02: P6_A2;
		           break;
		case 0x03: P6_A3;
		           break;
		case 0x04: P6_A4;
		           break;
		case 0x05: P6_A5;
		           break;
		case 0x06: P6_A6;
		           break;
		case 0x07: P6_A7;
		           break;
		case 0x08: P6_A8;
		           break;
		case 0x09: P6_A9;
		           break;
		case 0x00: P6_A0;
		           break;
	}	
}
//******************************************************************
// Write minutes in LCD
//******************************************************************
void LCD_min()
{

	switch (RTCMIN & 0xF0)	     // switch to write minutes first digit
	{
		case 0x10: P5_A1;
                           break;
		case 0x20: P5_A2;
		           break;
		case 0x30: P5_A3;
		           break;
		case 0x40: P5_A4;
		           break;
		case 0x50: P5_A5;
		           break;
		case 0x00: P5_A0;
		           break;
	}
        switch (RTCMIN & 0x0F)	     // switch to write minutes second digit
	{
		case 0x01: P4_A1;
		           break;
		case 0x02: P4_A2;
		           break;
		case 0x03: P4_A3;
		           break;
		case 0x04: P4_A4;
		           break;
		case 0x05: P4_A5;
		           break;
		case 0x06: P4_A6;
		           break;
		case 0x07: P4_A7;
		           break;
		case 0x08: P4_A8;
		           break;
		case 0x09: P4_A9;
		           break;
		case 0x00: P4_A0;
		           break;
	}	
}
//******************************************************************
// Write seconds in LCD
//******************************************************************
void LCD_sec()
{
	switch (RTCSEC & 0xF0)	     // switch to write seconds first digit
	{
		case 0x10: P3_A1;
		           break;
		case 0x20: P3_A2;
			       break;
		case 0x30: P3_A3;
			       break;
		case 0x40: P3_A4;
			   break;
		case 0x50: P3_A5;
		           break;
		case 0x00: P3_A0;
		           break;
	}
        switch (RTCSEC & 0x0F)        // switch to write seconds second digit
	{
		case 0x01: P2_A1;
		           break;
		case 0x02: P2_A2;
		           break;
		case 0x03: P2_A3;
		           break;
		case 0x04: P2_A4;
		           break;
		case 0x05: P2_A5;
		           break;
		case 0x06: P2_A6;
		           break;
		case 0x07: P2_A7;
		           break;
		case 0x08: P2_A8;
		           break;
		case 0x09: P2_A9;
		           break;
		case 0x00: P2_A0;
	}	
}
//************************************************************
// LCD clean routine – Function
//************************************************************

void LCD_all_off(void)
{
 LCDM2 = 0x00;
 LCDM3 = 0x00;
 LCDM4 = 0x00;
 LCDM5 = 0x00;
 LCDM6 = 0x00;
 LCDM7 = 0x00;
 LCDM8 = 0x00;
 LCDM9 = 0x00;
 LCDM10 = 0x00;
 LCDM11 = 0x00;
 LCDM12 = 0x00;
 LCDM13 = 0x00;
}  
//*****************************************************************
//  Basic Timer interrupt service routine: refresh LCD with 1 sec
//*****************************************************************
#pragma vector=BASICTIMER_VECTOR
__interrupt void basic_timer_ISR(void)

{
    
      LCD_sec();
      LCD_min();
      LCD_hour();
      
      if (RTCSEC & 0x01)
      {
        P3_DOT_ON;
        P5_DOT_ON;
      }
      else
      {
        P3_DOT_OFF;
        P5_DOT_OFF;
      }
      
      
      for(i=32768; i!=0 ; i--);
  
      LCD_all_off();
        
}     

//******************************************************************
// Timer_A ISR
//******************************************************************
#pragma vector=TIMERA0_VECTOR
__interrupt void TimerA0_ISR (void)
{
  
  P7_AE;
  P6_AF;  
  P5_AF;
  P4_Ai;
  
  for(i=32768; i!=0 ; i--);
  
  LCD_all_off();
    
}

//******************************************************************
// PORT1 ISR - BUTTONS
//******************************************************************

#pragma vector=PORT1_VECTOR
__interrupt void Port_1 (void)
{

  switch (P1IFG)
  {
  case 0x01:  B1_button();
    break;
    
  case 0x02:  B2_button(); 
    break;
    
  case 0x04:  B3_button();
    break;
    
  case 0x08:  B4_button();
    break;
    
  case 0x10:  B5_button();
    break;
    
  case 0x20:  B6_button();
    break;
    
  case 0x40:  B7_button();
    break;
    
  case 0x80:  B8_button();
    break;
}
}

//************************************************************
// Main routine 
//************************************************************
void main (void)
{

//Stop WatchDog
 
  WDTCTL = WDTPW | WDTHOLD;                 // Stop WDT

//************************************************************
// LCD INIT
//************************************************************

// LCD COM0-COM1-COM2-COM3 configuration

P5DIR |= 0x1E;      // Ports P5.2, P5.3 and P5.4 as outputs
P5SEL |= 0x1E;      // Ports P5.2, P5.3 and P5.4 as special                            
                    // function (COM1, COM2 and COM3)
// LCD_A S0-S21 configuration

LCDAPCTL0 = LCDS24 | LCDS20 | LCDS16 | LCDS12 | LCDS8 | LCDS4;

// LCDA configuration

LCDACTL = LCDFREQ_192 | LCD4MUX | LCDSON | LCDON;  

// (ACLK = 32768)/192, 4-mux LCD, LCD_A on, Segments on

LCDAVCTL0 = LCDCPEN;                    // Charge pump enable
LCDAVCTL1 = VLCD_3_44;                  // VLCD = 3,44 V

// Clean LCD
 
  LCD_all_off();
  
// Display name

  
//************************************************************
// LEDS INIT
//************************************************************
  
// LED1 and LED2 configuration  

  P2DIR = 0x06;         // P2.2 and P2.1 set as digital output
  P2OUT = 0x04;         // LED1 on(system on) and LED2 off

// LED4 configuration  

  P5DIR = 0x02;         // P5.1 set as digital output
  P5OUT = 0x00;         // LED5 off
 


 
//************************************************************
// Real Time Clock INIT
//************************************************************  

// RTC configuration
  
RTCCTL = RTCBCD | RTCHOLD | RTCMODE_3;   // BCD mode, RTC e BT disable
                                         // Interrupt disable
                                
   
// Init Clock

  RTCSEC =  0x00;               // Set Seconds in BCD format
  RTCMIN =  0x51;               // Set Minutes in BCD format
  RTCHOUR = 0x20;               // Set Hours in BCD format   
  RTCCTL &= ~RTCHOLD;           // Enable RTC
  

//************************************************************
// Buttons INIT
//************************************************************  
  
// SW1 and SW2 configuration 

  P1SEL = 0x00;         // P1.0 and P1.1 I/O ports
  P1DIR = 0x00;         // P1.0 and P1.1 digital inputs
  P1IFG = 0x00;         // Clear P1 flags
  P1IES &= ~0xFF;       // high-to-low transition interrupts
  P1IE  = 0xFF;         // enable port interrupts
  


//************************************************************
// Buzzer INIT
//************************************************************ 
  
// Buzzer port configuration (Port3)

  P3SEL |= 0x20;        // P3.5 as special function
  P3DIR |= 0x20;        // P3.5 as digital output
  
  
    P3OUT ^= 0xFF;   
    for(i=50000;i>0;i--);                   // How long it stays on/off (delay) 


//************************************************************
// Basic Timer 1 INIT = 1 Sec , For LCD refresh
//************************************************************   
  
//Basic Timer 1 Interrupt Configuration

  BTCTL = BTDIV | BT_fCLK2_DIV128; // (ACLK=32768/256)/128 = 1 Sec
  IE2 |=BTIE;                      // Enable Basic Timer 1 interrupts

//************************************************************
// FLL INIT = 8 MHz
//************************************************************   

//FLL+ configuration 		            // ACLK - 32.768 kHz 
  /*
  FLL_CTL0 |= DCOPLUS + XCAP18PF;           // DCO+ set, freq = xtal x D x N+1
  SCFI0 |= FN_4;                            // x2 DCO freq, 8MHz nominal DCO
  SCFQCTL = 121;                            // (121+1) x 32768 x 2 = 7.99 MHz
  */
  




//************************************************************
// SPI INIT 
//************************************************************    

//SPI init

  P4SEL |= 0x38;                // P4.5,4,3 SPI option select
  U1CTL = CHAR+SYNC+MM+SWRST;     // 8-bit, SPI, Master
  U1TCTL |= CKPL+SSEL1;         // Polarity, SMCLK, 4 -wire
  U1BR0 = 0x002;                // SPICLK = SMCLK/2
  U1BR1 = 0x000;                //
  U1MCTL = 0x000;               //
  ME2 |= USPIE1;                // Module enable
  U1CTL &= ~SWRST;              // SPI enable
  IE2 |= URXIE1;                // Receive interrupt enable
  


  
  
//************************************************************
// Timer_A INIT = 1 mseg
//************************************************************ 
  // Timer_A configuration
  TAR = 0;			                       // Clean Timer A counter
  CCTL0 = CCIE;                                        // CCR0 interrupt enabled
  CCR0 = 32768;				       // this count correspond to 50 ms
  TACTL = TASSEL_1 + MC_1 + ID_0;                      // ACLK, continuous mode


//************************************************************
// Interrupts INIT 
//************************************************************   

// Interrupts enabled
	
__bis_SR_register(LPM3_bits + GIE);   // Enter LPM3 w/ interrupt

}
































#include <msp430xG46x.h> // Library
#include <LCD_defs.h>    // Library


unsigned char MST_Data,SLV_Data1,SLV_Hi, SLV_lo,x,y;
volatile unsigned int byte_c;

int main(void)
{
  volatile unsigned int i;

  WDTCTL = WDTPW+WDTHOLD;                   // Stop watchdog timer
  FLL_CTL0 |= XCAP14PF;                     // Configure load caps

  // Wait for xtal to stabilize
  
  do
  {
  IFG1 &= ~OFIFG;                           // Clear OSCFault flag
  for (i = 0x47FF; i > 0; i--);             // Time for flag to set
  }
  while ((IFG1 & OFIFG));                   // OSCFault flag still set?

  for(i=2100;i>0;i--);                      // Now with stable ACLK, wait for
                                            // DCO to stabilize.

// BOOTEN1 and BOOTEN2 INIT 
  
  P6DIR |= 0x03;                            // P6.0 (BOOTEN1) and P6.1 (BOOTEN2) are output direction
  
  
//SPI INIT
 
  P4SEL |= 0x38;                            // P4.5,P4.4,P4.3 SPI option select
  P4DIR |= 0x2F;                    // Set direction of CLK and data out as output 
                                    // data in as input and chip select as 1
  U1CTL = CHAR+SYNC+MM+SWRST;               // 8-bit, SPI, Master
  U1TCTL |= CKPL+SSEL1+STC;                 // Polarity, SMCLK, 3-wire
  U1BR0 = 0x002;                            // SPICLK = SMCLK/2
  U1BR1 = 0x000;                            //
  U1MCTL = 0x000;                           //
  ME2 |= USPIE1;                            // Module enable
  U1CTL &= ~SWRST;                          // SPI enable
  
// Reset option to CMX
  
  P4OUT |=  0x04;                           // CSN=1
  P4OUT &= ~0x04;                           // CSN: 1---->0
  P6OUT |= 0x03;                            // BOOTEN 1 and 2 are 11
  U1TXBUF = 0x01;                           // send General Reset $01
  while (!(IFG2 & UTXIFG1));                // wait for TX register to empty   
  P4OUT |=  0x04;                           // CSN=1
  P6OUT &= 0x00;                            // BOOTEN 1 and 2  is 00
  
  
// Start transmit Register C0 + Data
  
  
  P4OUT &= ~0x04;                           // CSN: 1---->0

  MST_Data = 0xC0;                          // MST_Data = $C0
                                            
  U1TXBUF = MST_Data;                       // Transmit  REGISTER C0
  while (!(IFG2 & UTXIFG1));                // wait for TX register to empty      
 
  x=0xAB;                                   // x = High data value = 0xAB;
  U1TXBUF = x;                              // Transmit Hi character AB    
  while (!(IFG2 & UTXIFG1));                // wait for TX register to empty 
   
  y=0xCD;                                   // y = Low data value = 0xCD 
  U1TXBUF = y;                              // Transmit low character CD
 
  while (!(IFG2 & UTXIFG1));                // wait for TX register to empty 
   
  P4OUT |=  0x04;                           // CSN=1
   
// Start transmit Register $C4
  
  P4OUT &= ~0x04;                           // CSN: 1---->0
  
  _BIS_SR(GIE);  
  IFG2 = ~URXIFG1;                          // zero receive interrupt flag    
  IE2 |= URXIE1;                            // Receive interrupt enable
  SLV_Data1 = 0xC4;                         // SLV_Data = $C4                        
  U1TXBUF = SLV_Data1;                      // Transmit REGISTER C4
  while(!(IFG2 & UTXIFG1));

  while(1)
    U1TXBUF = 0xff;
  
  // END of transmission 
  
  _BIS_SR(LPM0_bits + GIE);                 // CPU off, enable interrupts
  _NOP();
}

//END Of Main


#pragma vector=USART1RX_VECTOR
__interrupt void USART1_rx (void)
{
  volatile unsigned int i;
  
 // while(!(IFG2 & UTXIFG1));
  if (U1RXBUF==0xAB)
  {
  SLV_Hi=U1RXBUF;                           // Receive High byte
  }
}

